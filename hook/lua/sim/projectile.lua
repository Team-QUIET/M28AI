---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 02/12/2022 09:11
---
local M28Events = import('/mods/M28AI/lua/AI/M28Events.lua')

do --Per Balthazaar - encasing the code in do .... end means that you dont have to worry about using unique variables
    local M28OldProjectile = Projectile
    Projectile = Class(M28OldProjectile) {

        OnImpact = function(self, targetType, targetEntity)
            if targetType == 'Terrain' then ForkThread(M28Events.OnImpactTerrain, self, targetType, targetEntity, self:GetPosition(), self:GetCurrentTargetPosition()) end
            M28OldProjectile.OnImpact(self, targetType, targetEntity)
        end,
        --[[OnTrackTargetGround = function(self)
            M28OldProjectile.OnTrackTargetGround(self)
            ForkThread(M28Events.ProjectileFiredAtGround,self)
        end,--]]
        OnCreate = function(self, inWater)
            M28OldProjectile.OnCreate(self, inWater)
            ForkThread(M28Events.ProjectileCreated,self, inWater)
        end,
        OnKilled = function(self, instigator, type, overkillRatio)
            --Destructive hook
            -- callbacks for launcher to have an idea what is going on for AIs
            local launcher = self.Launcher
            if not IsDestroyed(launcher) then
                launcher:OnMissileIntercepted(self:GetCurrentTargetPosition(), instigator, self:GetPosition(), self)

                -- keep track of the number of intercepted missiles
                --DiskGetFileInfo used as a proxy for checking if bFAFactive = true; for non-FAF increasing the kills could cause combat units with built in TMD like cruisers to vet early
                if not IsDestroyed(instigator) and instigator.GetStat and (DiskGetFileInfo('/lua/sim/navutils.lua') or (instigator.UnitId and EntityCategoryContains(categories.ANTIMISSILE * categories.STRUCTURE - categories.DIRECTFIRE, instigator.UnitId))) then
                    instigator:UpdateStat('KILLS', instigator:GetStat('KILLS', 0).Value + 1)
                end
            end

            self:CreateImpactEffects(self.Army, self.FxOnKilled, self.FxOnKilledScale)
            self:Destroy()
        end,
    }
end