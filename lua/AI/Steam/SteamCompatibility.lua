---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by maudlin27.
--- DateTime: 19/07/2024 15:18
---

--Update unit categories
local M28Profiler = import('/mods/M28AI/lua/AI/M28Profiler.lua')
bUpdatedRepr = false
bUpdatedOtherSteamInfo = false
bUpdatedUnitCategories = false

function AddReprCommands()
    if not(bUpdatedRepr) then
        bUpdatedRepr = true
        local M28Utilities = import('/mods/M28AI/lua/AI/M28Utilities.lua')
        _G.repru = rawget(_G, 'repru') or repr --With thanks to Balthazar for suggesting this for where e.g. FAF develop has a function that isnt yet in FAF main
        _G.reprs = rawget(_G, 'reprs') or
                function(tTable)
                    if tTable == nil then
                        return 'nil'
                    else
                        function GetVariableTypeOrValue(variable, iCurSubtableLevel)
                            if type(variable) == 'nil' then
                                return 'nil'
                            elseif type(variable) == 'number' then
                                return variable
                            elseif type(variable) == 'string' then
                                return variable
                            elseif type(variable) == 'boolean' then
                                if variable then return 'True' else return 'False' end
                            elseif type(variable) == 'function' then
                                return '<function>'
                            elseif type(variable) == 'userdata' then
                                return '<userdata>'
                            elseif type(variable) == 'thread' then
                                return '<thread>'
                            elseif type(variable) == 'table' then
                                local sCombinedTable = ''
                                for iEntry, vValue in variable do
                                    if iCurSubtableLevel and iCurSubtableLevel >= 2 then
                                        sCombinedTable = sCombinedTable..'['..iEntry..']='..'Value (stopped for performance)'
                                    else
                                        sCombinedTable = sCombinedTable..'['..iEntry..']='..GetVariableTypeOrValue(vValue, (iCurSubtableLevel or 0) + 1)
                                    end
                                end
                                return sCombinedTable
                            else
                                return '<unexpected type>'
                            end
                        end

                        return GetVariableTypeOrValue(tTable)

                    end --With thanks to Balthazar for suggesting this for where e.g. FAF develop has a function that isnt yet in FAF main
                end
        if M28Utilities.bSteamActive then
            _G.repr = function(tTable)
                if tTable == nil then
                    return 'nil'
                else
                    function GetVariableTypeOrValue(variable, iCurSubtableLevel)
                        if type(variable) == 'nil' then
                            return 'nil'
                        elseif type(variable) == 'number' then
                            return variable
                        elseif type(variable) == 'string' then
                            return variable
                        elseif type(variable) == 'boolean' then
                            if variable then return 'True' else return 'False' end
                        elseif type(variable) == 'function' then
                            return '<function>'
                        elseif type(variable) == 'userdata' then
                            return '<userdata>'
                        elseif type(variable) == 'thread' then
                            return '<thread>'
                        elseif type(variable) == 'table' then
                            local sCombinedTable = ''
                            for iEntry, vValue in variable do
                                if iCurSubtableLevel and iCurSubtableLevel >= 4 then
                                    sCombinedTable = sCombinedTable..'['..iEntry..']='..'Value (stopped for performance)'
                                else
                                    sCombinedTable = sCombinedTable..'['..iEntry..']='..GetVariableTypeOrValue(vValue, (iCurSubtableLevel or 0) + 1)
                                end
                            end
                            return sCombinedTable
                        else
                            return '<unexpected type>'
                        end
                    end

                    return GetVariableTypeOrValue(tTable, 0)
                end
            end
        end
    end
end

function OtherSteamCompatibilityInformation()
    local bDebugMessages = false if M28Profiler.bGlobalDebugOverride == true then   bDebugMessages = true end
    local sFunctionRef = 'OtherSteamCompatibilityInformation'
    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerStart)

    if bDebugMessages == true then LOG(sFunctionRef..': Start of code, bUpdatedOtherSteamInfo='..tostring(bUpdatedOtherSteamInfo)) end
    if not(bUpdatedOtherSteamInfo) then
        bUpdatedOtherSteamInfo = true
        AddReprCommands()
        UpdateUnitCategories()

        --Set AIx rates to 2.0 if not specified
        if not(ScenarioInfo.Options.CheatMult) then ScenarioInfo.Options.CheatMult = '2.0' end
        if not(ScenarioInfo.Options.BuildMult) then ScenarioInfo.Options.BuildMult = '2.0' end

        local M28Building = import('/mods/M28AI/lua/AI/M28Building.lua')
        M28Building.bShieldsCanDischarge = false
        if not(ScenarioInfo.Options.Share) then ScenarioInfo.Options.Share = 'None' end
        if bDebugMessages == true then LOG(sFunctionRef..': Finsihed updating for steam compatibility') end

        --fix the scenarioinfo values from custom game options if are in LOUD, as it uses keys
        --[[local LobbyOptions = import('/mods/M28AI/lua/CustomOptions/M28LOUDLobbyOptions.lua')
        local vCurKey
        if bDebugMessages == true then LOG(sFunctionRef..': About to go through lobby options and update scenario info, LobbyOptions.LobbyGlobalOptions='..repru(LobbyOptions.LobbyGlobalOptions)) end
        for iEntry, tOptionData in LobbyOptions.LobbyGlobalOptions do
            vCurKey = ScenarioInfo.Options[tOptionData.key]
            if bDebugMessages == true then LOG(sFunctionRef..': Considering vCurKey='..(vCurKey or 'nil')..'; tOptionData.key='..(tOptionData.key or 'nil')..'; iEntry='..iEntry) end
            for iValueEntry, tValueData in tOptionData.values do
                if bDebugMessages == true then LOG(sFunctionRef..': Considering tValueData.key='..tValueData.key or 'nil') end
                if tValueData.key == vCurKey then
                    if bDebugMessages == true then LOG(sFunctionRef..': Replacing scenario info for option Data key='..tOptionData.key..'; Scenario info value='..ScenarioInfo.Options[tOptionData.key]..'; Will change to tValueData.text='..tValueData.text) end
                    ScenarioInfo.Options[tOptionData.key] = tValueData.text
                    break
                end
            end
        end--]]
    end

    M28Profiler.FunctionProfiler(sFunctionRef, M28Profiler.refProfilerEnd)
end

function UpdateUnitCategories()
    if not(bUpdatedUnitCategories) then
        bUpdatedUnitCategories = true
        local M28UnitInfo = import('/mods/M28AI/lua/AI/M28UnitInfo.lua')
        --Land based:
        --lack of BOT category for experimentals
        M28UnitInfo.refCategoryMonkeylord = categories.CYBRAN * categories.MOBILE * categories.EXPERIMENTAL * categories.DIRECTFIRE - categories.CONSTRUCTION + categories.url0402
        M28UnitInfo.refCategoryMegalith = categories.CYBRAN * categories.MOBILE * categories.EXPERIMENTAL * categories.DIRECTFIRE * categories.CONSTRUCTION + categories.xrl0403
        M28UnitInfo.refCategoryYthotha = M28UnitInfo.refCategoryYthotha + categories.xsl0401
        M28UnitInfo.refCategoryFatboy = M28UnitInfo.refCategoryFatboy + categories.uel0401

        --lack of PERSONALSHIELD category:
        M28UnitInfo.refCategoryObsidian = M28UnitInfo.refCategoryObsidian + categories.ual0202
        M28UnitInfo.refCategoryPersonalShield = M28UnitInfo.refCategoryPersonalShield + categories.uel0303 + categories.ual0303
        --STEALTHFIELD
        M28UnitInfo.refCategoryMobileLandStealth = M28UnitInfo.refCategoryMobileLandStealth + categories.CYBRAN * categories.COUNTERINTELLIGENCE * categories.MOBILE * categories.LAND + categories.url0306
        M28UnitInfo.refCategoryStealthBoat = M28UnitInfo.refCategoryStealthBoat + categories.CYBRAN * categories.OVERLAYCOUNTERINTEL * categories.NAVAL * categories.DEFENSIVEBOAT + categories.xrs0205
        M28UnitInfo.refCategoryStealthGenerator = M28UnitInfo.refCategoryStealthGenerator + categories.COUNTERINTELLIGENCE * categories.STRUCTURE * categories.TECH2 + categories.ueb4203 + categories.urb4203 + categories.uab4203 + categories.xsb4203
        --STEALTH
        M28UnitInfo.refCategoryStealthAndCloakPersonal = M28UnitInfo.refCategoryStealthAndCloakPersonal + categories.xsl0101
        --BOMB
        M28UnitInfo.refCategoryMobileBomb = M28UnitInfo.refCategoryMobileBomb + categories.xrl0302
        M28UnitInfo.refCategoryMercy = M28UnitInfo.refCategoryMercy + categories.daa0206
        --Steam specific - no antishield category
        M28UnitInfo.refCategoryShieldDisruptor = M28UnitInfo.refCategoryShieldDisruptor + categories.dal0310

        --Steam specific - no amphibious category
        M28UnitInfo.refCategoryAmphibious = M28UnitInfo.refCategoryAmphibious + M28UnitInfo.refCategoryMex + categories.uel0001 + categories.uel0301 + categories.uel0401 + categories.url0001 + categories.url0301 + categories.ual0001 + categories.ual0301 + categories.xsl0001 + categories.xsl0301 + categories.xrl0305 + categories.url0203 + categories.url0402 + categories.xrl0403 + categories.xel0305 + categories.ual0401 + categories.xsl0303
        M28UnitInfo.refCategoryAmphibiousCombat = M28UnitInfo.refCategoryAmphibiousCombat + categories.uel0001 + categories.uel0301 + categories.uel0401 + categories.url0001 + categories.url0301 + categories.ual0001 + categories.ual0301 + categories.xsl0001 + categories.xsl0301 + categories.xrl0305 + categories.url0203 + categories.url0402 + categories.xrl0403 + categories.xel0305 + categories.ual0401 + categories.xsl0303
        M28UnitInfo.refCategorySalem = M28UnitInfo.refCategorySalem + categories.urs0201
        M28UnitInfo.refCategoryAllAmphibiousAndNavy = M28UnitInfo.refCategoryAllAmphibiousAndNavy + M28UnitInfo.refCategoryAmphibiousCombat
        M28UnitInfo.refCategoryNavyThatCanBeTorpedoed = M28UnitInfo.refCategoryNavyThatCanBeTorpedoed + M28UnitInfo.refCategoryAmphibious

        --Naval based: LOUD specific issues so dont need for steam
        --M28UnitInfo.refCategoryAntiNavy = M28UnitInfo.refCategoryAntiNavy + categories.DESTROYER + categories.SUBMARINE --Unlike LOUD, Steam has antinavy for subs and destroyers
        --M28UnitInfo.refCategorySubmarine = M28UnitInfo.refCategorySubmarine + categories.SUBMARINE
        --M28UnitInfo.refCategoryGroundAA = M28UnitInfo.refCategoryGroundAA + categories.NAVALCARRIER --Unlike LOUD, Steam has antiair category for aircraft carriers
        --M28UnitInfo.refCategoryBattlecruiser = M28UnitInfo.refCategoryBattlecruiser + categories.CRUISER * categories.UEF * categories.TECH3 * categories.DIRECTFIRE + categories.xes0307 --Steam uses battleship (unlike LOUD) for battlecruiser
        --M28UnitInfo.refCategoryMissileShip = M28UnitInfo.refCategoryMissileShip + categories.NAVAL * categories.MOBILE * categories.INDIRECTFIRE * categories.BOMBARDMENT - categories.SUBMERSIBLE --LOUD speciifc category issue
        --M28UnitInfo.refCategoryNavalAA = M28UnitInfo.refCategoryNavalAA + M28UnitInfo.refCategoryAntiAir * categories.NAVAL * categories.MOBILE + categories.CRUISER * categories.MOBILE * categories.TECH2 + categories.NAVALCARRIER * categories.MOBILE * categories.TECH3 + categories.NAVALCARRIER * categories.EXPERIMENTAL * categories.MOBILE --LOUD specific category issue
    end
end